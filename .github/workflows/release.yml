name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name (e.g. v1.2.3)'
        required: true
      draft:
        description: 'Create as draft release'
        type: boolean
        default: false
      prerelease:
        description: 'Mark as prerelease'
        type: boolean
        default: false
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-windows:
    name: Build Windows exe
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Enable Windows Desktop
        run: flutter config --enable-windows-desktop

      - name: Flutter pub get
        run: flutter pub get

      - name: Build Windows Release
        run: flutter build windows --release

      - name: Package exe (zip)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $outDir = "build/windows/x64/runner/Release"
          if (-not (Test-Path $outDir)) { throw "Build output not found: $outDir" }
          $zipName = "pick_up_memories-windows.zip"
          Compress-Archive -Path "$outDir/*" -DestinationPath $zipName -Force
          echo "zip_name=$zipName" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: |
            *.zip

  build-android:
    name: Build Android APKs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable

      - name: Flutter pub get
        run: flutter pub get

      - name: Build APK (per ABI)
        run: flutter build apk --release --split-per-abi

      - name: Rename APKs with tag
        run: |
          set -e
          OUT="build/app/outputs/flutter-apk"
          ls -la "$OUT"
          for f in "$OUT"/*-release-*.apk; do
            base=$(basename "$f")
            # Expect names like app-arm64-v8a-release.apk, app-armeabi-v7a-release.apk, app-x86_64-release.apk
            abi=$(echo "$base" | sed -nE 's/.*-(arm64-v8a|armeabi-v7a|x86_64)-release.*/\1/p')
            if [ -z "$abi" ]; then echo "Skip $base, ABI not detected"; continue; fi
            new="pick_up_memories-${abi}.apk"
            cp "$f" "$new"
            echo "Renamed $base -> $new"
          done

      - name: Upload android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            *.apk

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-windows, build-android]
    steps:
      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-zip
          path: ./dist

      - name: Download android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-apks
          path: ./dist

      - name: Display collected files
        run: ls -la ./dist

      - name: Compute release meta
        id: meta
        env:
          INPUT_TAG: ${{ github.event.inputs.tag }}
          INPUT_DRAFT: ${{ github.event.inputs.draft }}
          INPUT_PRERELEASE: ${{ github.event.inputs.prerelease }}
        run: |
          set -e
          if [ "${GITHUB_REF_TYPE}" = "tag" ] && [ -n "${GITHUB_REF_NAME}" ]; then
            TAG="${GITHUB_REF_NAME}"
          else
            TAG="${INPUT_TAG}"
          fi
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          if [ "${INPUT_DRAFT}" = "true" ]; then echo "draft=true" >> "$GITHUB_OUTPUT"; else echo "draft=false" >> "$GITHUB_OUTPUT"; fi
          if [ "${INPUT_PRERELEASE}" = "true" ]; then echo "prerelease=true" >> "$GITHUB_OUTPUT"; else echo "prerelease=false" >> "$GITHUB_OUTPUT"; fi

      - name: Rename artifacts with tag
        run: |
          set -e
          TAG='${{ steps.meta.outputs.tag }}'
          cd dist
          for f in *; do
            case "$f" in
              pick_up_memories-windows.zip)
                mv "$f" "pick_up_memories-windows-${TAG}.zip" ;;
              pick_up_memories-*.apk)
                base="${f%.apk}"
                abi="${base#pick_up_memories-}"
                mv "$f" "pick_up_memories-${TAG}-${abi}.apk" ;;
            esac
          done
          ls -la

      - name: Create/Update Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.meta.outputs.tag }}
          draft: ${{ steps.meta.outputs.draft }}
          prerelease: ${{ steps.meta.outputs.prerelease }}
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
